name: Create Release

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Extract version from Cargo.toml
        id: version
        run: |
          version=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$version" >> $GITHUB_ENV

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const latestRelease = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            core.setOutput("latest_version", latestRelease.data.tag_name);

      - name: Check if version changed
        id: check_version
        run: |
          if [ "${{ env.version }}" == "${{ steps.get_release.outputs.latest_version }}" ]; then
            echo "Version has not changed."
            exit 0
          fi

  build-and-release:
    needs: check-version
    if: steps.check_version.outcome == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build for Linux
        run: cargo build --release

      - name: Cross-compile for Windows
        run: |
          rustup target add x86_64-pc-windows-gnu
          cargo build --release --target x86_64-pc-windows-gnu

      - name: List commits since last release
        id: changelog
        run: |
          git fetch --tags
          last_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          changelog=$(git log $last_tag..HEAD --oneline)
          echo "changelog=$changelog" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }}
          body: |
            Changelog:
            ${{ env.changelog }}
          draft: false
          prerelease: false

      - name: Upload Linux binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/balance_by_user
          asset_name: balance_by_user-linux
          asset_content_type: application/octet-stream

      - name: Upload Linux binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/generate_transactions
          asset_name: generate_transactions-linux
          asset_content_type: application/octet-stream

      - name: Upload Linux binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/read_transactions_from_binary
          asset_name: read_transactions_from_binary-linux
          asset_content_type: application/octet-stream

      - name: Upload Windows binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/x86_64-pc-windows-gnu/release/balance_by_user.exe
          asset_name: balance_by_user-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/x86_64-pc-windows-gnu/release/generate_transactions.exe
          asset_name: generate_transactions-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/x86_64-pc-windows-gnu/release/read_transactions_from_binary.exe
          asset_name: read_transactions_from_binary-windows.exe
          asset_content_type: application/octet-stream
