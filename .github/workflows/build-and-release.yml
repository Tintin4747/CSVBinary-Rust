name: Create Release

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version.outputs.version_changed }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Extract version from Cargo.toml
        id: version
        run: |
          version=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$version" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Get latest release (corrigÃ©)
        id: get_release
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            try {
              const { data } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              return data.tag_name;
            } catch (error) {
              if (error.status === 404) {
                return "0.0.0";
              }
              throw error;
            }

      - name: Check if version changed
        id: check_version
        run: |
          if [ "${{ env.version }}" == "${{ steps.get_release.outputs.result }}" ]; then
            echo "version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: check-version
    if: ${{ needs.check-version.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build for Linux
        run: cargo build --release

      - name: Install MinGW for cross-compilation
        run: sudo apt-get update && sudo apt-get install -y mingw-w64

      - name: Cross-compile for Windows
        run: |
          rustup target add x86_64-pc-windows-gnu
          cargo build --release --target x86_64-pc-windows-gnu

      - name: Get commits since last release
        id: get_commits
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            try {
              const latest = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const commits = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: 'main',
                since: latest.data.published_at,
              });
              return commits.data.map(commit => `- ${commit.commit.message}`).join('\n');
            } catch (error) {
              if (error.status === 404) {
                const commits = await github.rest.repos.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: 'main',
                });
                return commits.data.map(commit => `- ${commit.commit.message}`).join('\n');
              }
              throw error;
            }

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-version.outputs.version }}
          release_name: ${{ needs.check-version.outputs.version }}
          body: |
            Changelog:
            ${{ steps.get_commits.outputs.result }}
          draft: false
          prerelease: false

      - name: Upload Linux binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/balance_by_user
          asset_name: balance_by_user-linux
          asset_content_type: application/octet-stream

      - name: Upload Windows binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/x86_64-pc-windows-gnu/release/balance_by_user.exe
          asset_name: balance_by_user-windows.exe
          asset_content_type: application/octet-stream
