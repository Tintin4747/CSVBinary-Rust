name: Create Release

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version.outputs.version_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Extract version from Cargo.toml
        id: version
        run: |
          version=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$version" >> $GITHUB_ENV

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const latestRelease = await github.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              core.setOutput("latest_version", latestRelease.data.tag_name);
            } catch (error) {
              if (error.status === 404) {
                core.setOutput("latest_version", "0.0.0"); # Aucun release existant
              } else {
                throw error;
              }
            }

      - name: Check if version changed
        id: check_version
        run: |
          if [ "${{ env.version }}" == "${{ steps.get_release.outputs.latest_version }}" ]; then
            echo "
"version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi
